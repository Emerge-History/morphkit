workflow: 

req in -> place_id_exist? -> 
           - transparent


config structure:

place1.json:
{
    tag: ...
    services: {
        [plugin_name] : {

        },
        [web]: {
            baidu: {
                use: 'baidu'
            }
        }
    }
}


req in -> place_id -> jobs..

[ req -> secondary req maker -> secondary res -> res ]

[ req -> plugins (stripper) => secondary req maker -> secondary res ->

req -> pre_stripper ? -> secondary -> 

[ req redirection ]
[  ]


http://www.qq.com -> sslstrip 
http://bing.com

place1.json
{
    /www.baidu.com/: [...inject.js, ...inject2.js];
    /..com/: {
        httpsdowngrade: false,
        strip: true
    }
    /.../: {
        strip: false,
        redirect: www.google.com
    }
    /../: {
        ban: true
    }
    /*/: [all.js]
    
    weibo: {

    }
}




tc.j
{
    strip: false,
    [ /http://m.baidu.com/, mobile=true ]: {
        strip: true, 
        httpDowngrade: true,
        inject: [ 1.js, 2.js ]
    },
    [ /http://www.baidu.com/, mobile=true ]: {
        strip: true,
        redirect: m.baidu.com
    },
    
    weibo: {
        enabled: true,
        source: [ 1.json ]
    }
}



test: 1;

server {
    location /.../: {

    }
}




http, https 

sslstrip
req -> req2 -> res2 -> res
    sslstrip        sslstrip

req -> redirect
req ->...... res2 -> inject



s = createServer();
s.next(require(redirect));
s.next(require(sslstrip));


















http://wifi.network/loader.js?placeId=...

